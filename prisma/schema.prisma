generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ERole {
  FATHER
  MOTHER
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  nickname  String    @unique
  role      ERole     @default(FATHER)
  bornAt    DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  fatherOf     Parent[]       @relation("FatherParents")
  motherOf     Parent[]       @relation("MotherParents")
  Conversation Conversation[]
}

model Parent {
  id        Int       @id @default(autoincrement())
  fatherId  Int?
  motherId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  father User? @relation("FatherParents", fields: [fatherId], references: [id])
  mother User? @relation("MotherParents", fields: [motherId], references: [id])

  babies Baby[]
}

model Baby {
  id             Int       @id @default(autoincrement())
  parentId       Int?
  fetusName      String?
  name           String?
  pregnancyDueAt DateTime?
  bornAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?

  parent Parent? @relation(fields: [parentId], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user     User      @relation(fields: [userId], references: [id])
  messages Message[]
}

enum ESender {
  USER
  BOT
}

model Message {
  id             String    @id @default(uuid(7))
  conversationId Int
  sender         ESender   @default(USER)
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id])
}
